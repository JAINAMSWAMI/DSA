-----//ARRAYS//-----

-Collection of similar kind of data in a continuous allocation.
-In C and C++ we have pointers so definitely elements will be stored in continuous format.
-In Java we don't have pointers then there is a chance of elements might store in random places.

-----//Syntax//-----

DataType[] Array_name = { array_ values};

-----//Primitive and Non-primitive//-----

-Primitive DataTypes can't be splitted or divided ( int, float, char).
-Non-Primitive Datatypes can be divided (string, all the objects created by user).

Example for Non-Primitive:- Class Node{
				int data;
				Node = Next;

-All the objects will be stored in Heap memory, All the references will be stored in Stack memory.
-Stack memory having less space compared to Heap.


Example:- int a = 10;
	  int b = 12;
	  int c = 15;

-All the variables are storing same datatype
-So instead of creating multiple variables we create an array -> int[] arr = {10,20,30};
-If we create multiple variables to get the data simply we can print the variable, When it comes to Array if we want to print the data we can print the data using index values and by default index values start from 0.
 
-if we store the first value in heap memory, we cant say that the value is stored at particular address because it is stored at any address. We can only get the address from second value's address,like INT needs 4 bits of space so second address - 4 we can get 1st values address.


int[] arr; // Array Decleration//
arr = {1,2,3,4,5}; // Array Initialization//


//To get all the elements of array//

int[] arr = {1,2,3,4,5};
for(int i = 0; i<arr.length;i++){
System.out.println(arr[i]);


-To get Length of array we have "length" function.
-In Array its array_name.length  and in String its string_name.length().




------//Camel case and Snake Case//------

- In Camel Case we have names like "arrayName" so the second word's first letter is capital else small.
- In Snake Case we use a underscore '_' to assign the name like this "array_name" so this is snake case
- In Java it is preferred to use Camel Case.
- C# uses Pascal Case and Camel case in Pascal Case means every word's first letter is capital like this: - "AdditionOfTwoNumbers"
- Production Level code means you have to use full name of methods like if we are doing addition of 2 numbers you can't write 'add' you have to write full name 'additionOfTwoNumbers'.


--------//Types of printing format//-----------

i) we can array values using the for loop like this:-for(int i = 0; i<arr.length;i++){
							System.out.println(arr[i]);
						     }

ii) we can do this using foreach also like this :-foreach(int i in arr){
							System.out.println(i);
						     }
- In foreach loop we don't need index values

iii) To Convert Array to String: - int[] arr = {1,2,3,4,5};
					System.out.print(Array.toString(arr));

-toString is an In-built method to print array without using a loop

-toString accepts only one argument which is array name like this Array.toString(arr);

- Declerating a size of array and initialization of values later. like this :- int[] arr = new arr[5]; in this before '=' the array reference is created, with the help of 'new' keyword the actual object or space is created.

- Array having fixed size declared is can't be changed, once declared can't be changed.

- if the array type is INT all the default values are zero after just decleration of array. if it is a string the default values are null and null is a literal.

- Assigning the values to an array after decleration.
  arr[0] = 1;
  arr[1] = 2;
  arr[2] = 3;
and it does on until the space is there.

-Whenever you are trying to assign or trying to get n'th value of array you get an Exception called "Array out of bound"


we can solve problems on array using a count variable, % and / and rows and columns.







--------------------------//CODE ON ARRAY//------------------------------

1) Find even number count and odd number count in an array

import java.util.*;

class Main {
    public static void main(String[] args) {
        int []arr = {1,2,3,4,5,6,7,8,9};
        int count_even = 0;
        int count_odd = 0;
        for(int i = 0; i< arr.length;i++){
            if(arr[i] % 2 == 0){
                count_even++;
            }
            else{
                count_odd++;
            }
        }
        System.out.println("Even Count: "+count_even);
            System.out.println("Odd Count: " + count_odd);
    }
}




2) find highest value in an array


import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] arr = {1,4,5,8,9,6,4,5,2,3,6,54,4,2,3,3};
        int max = arr[0];
        for(int i = 1; i<arr.length; i++){
            if(arr[i] > max){
                max = arr[i];
            }
            
        }
        System.out.println(max);
    }
}



3) find Second highest value


class Main {
    public static void main(String[] args) {
        int[] arr = {100,89,55,45};
        
        int FirstHighValue = arr[0];
        int SecondHighValue = Integer.MIN_VALUE;
        
        for(int i = 1; i<arr.length; i++){
            if(arr[i] > FirstHighValue){
                FirstHighValue = arr[i];
            }
        }
        
        for(int i = 1; i<arr.length;i++){
            if(arr[i] < FirstHighValue && arr[i] > SecondHighValue){
                SecondHighValue = arr[i];
            }
        }
        System.out.println(FirstHighValue);
        System.out.println(SecondHighValue);
    }
}


// CHECK WETHER THE GIVEN ARRAY IS SORTED OR NOT//

class Main {
    public static void main(String[] args) {
        int[]arr = {1,2,3,4,5,6,7,8,9,0};
        for(int i = 1; i<arr.length;i++){
            if(arr[i] > arr[i-1]){
                System.out.println("sorted");
                break;
            }
            else{
                System.out.println("not sorted");
                break;
            }
            
        }
        
    }
}



// check whether the given element is there in array//

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Text;
using System.Threading.Tasks;

namespace Basics
{
    public class checkArrayEleIsThere
    {
        public static void Main(String[] args)
        {
            Console.WriteLine("Enter a target to search in array space: ");
            int target = int.Parse(Console.ReadLine());
            int[] arr = {1,4,5,8,7,9,6,5,8,4,1,2,5,6,3};
            Array.Sort(arr);
            if(arr.Length == 0)
            {
                Console.WriteLine("Empty Array");
            }

            int left = 0;
            int right = arr.Length - 1;
            while(left <= right)
            {
                int mid = left + (right - left) / 2;
                if (arr[mid] == target)
                {
                    Console.WriteLine("Target found " + mid);
                    break;
                }
                else if (arr[mid] < target)
                {

                    left = mid + 1;
                }
                else
                {
                    right = mid - 1;
                }
            }
        }

    }
}




// In given array we have elements only 1's and 0's move all zeroes to the right side//







