---------------------------// LINEAR SEARCH //-------------------------------

- It's approach where we have to search the target in a linear way in array.
- When the array length is smaller than we use Linear search.
- It compares every element with the target element if the target element found in array it returns it's index.
- It's time complexity is O(n).


--------------------------// BINARY SEARCH //---------------------------------

- To reduce time complexity while searching we use binary search.
- In binary search we get result in O(log n) time complexity
- The array should be sorted in binary search.
- Initialize 2 pointers at 0 and arr.Length-1;
- run loop from left to right.(while(left<=right).
- take a input from user of target.
- then find the middle value using left + (right - left)/2.
- If arr[mid] == target return mid.
- if arr[mid] > target do left = mid+1;
- else arr[mid] < target do right = mid -1;

- In a given array find the target element using binary search.


------------------// Find element in rotated array //--------------------

Example - int[]arr = {7,8,1,2,3,4,5,6};
- Initialize left and right at 0 and arr.Length-1;
- run loop from left to right.
- we have to find which half of the array is sorted for that --> if (arr[mid] < arr[left]) it means that right haldf of the array is sorted, If target lies between if(arr[left]  <= target || target > arr[mid]) this means the element is present in left half. then do left pointer is same and do--> mid  = right -1. Else element present in right half then do--> left = mid +1.

- if(arr[mid] > arr[left] then left half of the array is sorted and if target lies in between arr[right] and arr[mid] it means element lies in right half of the array then do--> right pointer remains same and left pointer comes to left = mid +1. else the element is present in left half and the right pointer decreases to search element do--> right = mid -1.

- Question:- Find Lower bound and upper bound.